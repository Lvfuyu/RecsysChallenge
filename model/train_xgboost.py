#coding:utf-8

import numpy as np
import scipy.sparse
import xgboost as xgb
import sys
import ConfigParser

# load file from text file, also binary buffer generated by xgboost
dtrain = xgb.DMatrix(sys.argv[1])
dtest = xgb.DMatrix(sys.argv[2])
pred_file = sys.argv[3]

# parameters read from config file
cf = ConfigParser.ConfigParser()
cf.read('train.conf')
#print cf.sections()
depth = cf.getint('xgb', 'depth')
num_round = cf.getint('xgb', 'round');
eta = cf.getfloat('xgb', 'eta')
gamma = cf.getfloat('xgb', 'gamma')
lambda_para = cf.getfloat('xgb', 'lambda_para')
subsample = cf.getfloat('xgb', 'subsample')
colsample_bytree = cf.getfloat('xgb', 'colsample_bytree')

label = dtrain.get_label()
ratio = float(np.sum(label == 0)) / np.sum(label==1)

param = {
		 'max_depth':depth,
		 'eta':eta, 
		 'silent':1,
		 'objective':'binary:logistic',
		 'gamma':gamma,
		 'min_child_weight':3,
		 'lambda':lambda_para,
		 'scale_pos_weight':ratio,
		 'subsample':subsample,
		 'colsample_bytree':colsample_bytree,
		 'seed':2016
		 }

watchlist  = [(dtrain,'train'), (dtest, 'test')]
bst = xgb.train(param, dtrain, num_round, watchlist)
bst.save_model('train.model')

# predict
preds = bst.predict(dtest) #, ntree_limit=bst.best_ntree_limit
with open(pred_file, 'w') as f:
    for pred in preds:
    	if pred > 1.0:
    		pred = 1.0
        f.write(str(pred)+'\n')
